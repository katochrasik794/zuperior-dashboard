// server/prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String      @id @default(uuid())
  clientId         String      @unique @default(cuid())
  email            String      @unique
  password         String      // Hashed password
  name             String?
  phone            String?
  country          String?
  createdAt        DateTime    @default(now())
  accounts         Account[]
  transactions     Transaction[]
  kyc              KYC?
  mt5Accounts      MT5Account[]
}


model KYC {
  id               String      @id @default(uuid())
  isDocumentVerified Boolean   @default(false)
  isAddressVerified  Boolean   @default(false)
  verificationStatus String      @default("Pending")
  user             User        @relation(fields: [userId], references: [id])
  userId           String      @unique
}

model MT5Account {
     id               String           @id @default(uuid())
     accountId        String           @unique // MT5 Account ID from API response
     userId           String           // Link to User table
     user             User             @relation(fields: [userId], references: [id])
     createdAt        DateTime         @default(now())

     mt5Transactions  MT5Transaction[]
 }
model MT5Transaction {
  id               String      @id @default(uuid())
  type             String      // "Deposit" or "Withdrawal"
  amount           Float
  status           String      @default("pending") // "pending", "completed", "failed"
  paymentMethod    String?     // "crypto", "card", "bank"
  transactionId    String?     // External payment gateway ID
  comment          String?
  mt5Account       MT5Account  @relation(fields: [mt5AccountId], references: [id])
  mt5AccountId     String
  createdAt        DateTime    @default(now())
}

// Add the missing Account Model
model Account {
  id              String    @id @default(uuid())
  // A foreign key back to the User model
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  accountType     String    // e.g., 'trading', 'wallet'
  balance         Float     @default(0)
  // ... other account fields
}

// Add the missing Transaction Model
model Transaction {
  id              String    @id @default(uuid())
  // A foreign key back to the User model
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  type            String    // e.g., 'deposit', 'withdrawal', 'transfer'
  amount          Float
  status          String    @default("pending")
  // ... other transaction fields
}